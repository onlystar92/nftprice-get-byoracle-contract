{
  "language": "Solidity",
  "sources": {
    "contracts/MetaVerseNFTOracle.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './interfaces/IChainlinkV3Aggregator.sol';\nimport './interfaces/INFTPriceOracle.sol';\n\n////////////////////////////////////////////////////////////////////////////////////////////\n/// @title MetaVerseNFTOracle\n/// @author @commonlot\n/// @notice oracle contract for NFT\n////////////////////////////////////////////////////////////////////////////////////////////\n\ncontract MetaVerseNFTOracle is Ownable, INFTPriceOracle {\n    /// @dev contract addrss => PriceInfo\n    mapping(address => PriceInfo) public nftPrices;\n\n    /// @dev return true when address can read oracle price data\n    mapping(address => bool) public isWhiteListed;\n\n    /// @notice return true if address can update price\n    mapping(address => bool) public isUpdater;\n\n    /// @dev chainlink Price feed for ETH / USD\n    IChainlinkV3Aggregator public override etherPriceAggregator;\n\n    /// @dev decimal\n    uint8 public constant decimals = 8;\n\n    modifier onlyUpdater() {\n        require(isUpdater[msg.sender] || msg.sender == owner(), 'ONLY_UPDATERS');\n        _;\n    }\n\n    modifier onlyWhitelist() {\n        require(isWhiteListed[msg.sender] || msg.sender == owner(), 'ONLY_WHITELIST');\n        _;\n    }\n\n    event SetUpdaters(address[] _updaters, bool[] _statusList);\n    event SetWhiteList(address[] _whiteList, bool[] _statusList);\n    event SetPrice(address _contract, int256 _usdPrice, int256 _etherPrice, address _updater);\n\n    constructor(address _etherUSDAggregator) {\n        etherPriceAggregator = IChainlinkV3Aggregator(_etherUSDAggregator);\n    }\n\n    /// @dev set new updaters that can write NFT price\n    /// @param _updaters address array of updaters\n    /// @param _statusList status array of updaters\n    function setUpdaters(address[] memory _updaters, bool[] memory _statusList) external onlyOwner {\n        require(\n            _updaters.length > 0 &&\n                _statusList.length > 0 &&\n                _statusList.length == _statusList.length,\n            'setUpdaters:INVALID_DATA'\n        );\n        for (uint256 i = 0; i < _updaters.length; i++) {\n            require(_updaters[i] != address(0), 'setUpdaters:INVALID_UPDATER');\n            isUpdater[_updaters[i]] = _statusList[i];\n        }\n\n        emit SetUpdaters(_updaters, _statusList);\n    }\n\n    /// @dev set new price for the NFT\n    /// @param _contract address of collection contract\n    /// @param _usdPrice usd price of NFT token (decimal is 8)\n    function setPrice(address _contract, int256 _usdPrice) external onlyUpdater {\n        require(_contract != address(0), 'setPrice: INVALID_CONTRACT');\n        require(_usdPrice > 0, 'setPrice: INVALID_USD_PRICE');\n\n        int256 _etherPrice = (_usdPrice * 1e8) / etherUSD();\n\n        nftPrices[_contract] = PriceInfo({\n            usdPrice: _usdPrice,\n            etherPrice: _etherPrice,\n            lastUpdatedBlockNumber: block.number\n        });\n\n        emit SetPrice(_contract, _usdPrice, _etherPrice, msg.sender);\n    }\n\n    /// @dev set whitelisted address that can read oracle price data\n    /// @param _whiteList address array\n    /// @param _statusList status array\n    function setWhiteList(address[] memory _whiteList, bool[] memory _statusList)\n        public\n        override\n        onlyOwner\n    {\n        require(\n            _whiteList.length > 0 &&\n                _statusList.length > 0 &&\n                _whiteList.length == _statusList.length,\n            'setWhiteList:INVALID_DATA'\n        );\n        for (uint256 i = 0; i < _whiteList.length; i++) {\n            require(_whiteList[i] != address(0), 'setWhiteList:INVALID_ADDRESS');\n            isWhiteListed[_whiteList[i]] = _statusList[i];\n        }\n\n        emit SetWhiteList(_whiteList, _statusList);\n    }\n\n    /// @return usd & ether price of NFT token\n    function viewPrice(address _contract)\n        external\n        view\n        override\n        onlyWhitelist\n        returns (int256, int256)\n    {\n        require(_contract != address(0), 'viewPrice: INVALID_CONTRACT');\n        PriceInfo memory nft = nftPrices[_contract];\n        return (nft.usdPrice, nft.etherPrice);\n    }\n\n    /// @return price of ether in USD\n    function etherUSD() public view override returns (int256 price) {\n        (, price, , , ) = etherPriceAggregator.latestRoundData();\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IChainlinkV3Aggregator.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\ninterface IChainlinkV3Aggregator {\n    function decimals() external view returns (uint8);\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n"
    },
    "contracts/interfaces/INFTPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport './IChainlinkV3Aggregator.sol';\n\ninterface INFTPriceOracle {\n    /// @dev priceInfo of NFT\n    struct PriceInfo {\n        int256 usdPrice;\n        int256 etherPrice;\n        uint256 lastUpdatedBlockNumber;\n    }\n\n    /// @dev chainlink Price feed for ETH / USD\n    function etherPriceAggregator() external returns (IChainlinkV3Aggregator);\n\n    /// @dev set whitelisted address that can read oracle price data\n    function setWhiteList(address[] memory _whiteList, bool[] memory _statusList) external;\n\n    /// @return usd & ether price of NFT token\n    function viewPrice(address _contract) external returns (int256, int256);\n\n    /// @return price: usd price of Ether\n    function etherUSD() external returns (int256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}